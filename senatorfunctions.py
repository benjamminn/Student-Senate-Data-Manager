'''
Author(s): Benjamin Gordon
Last Edited: 12/16/2019
Purpose:  Calls database functions and controls the relevant treeview for the senator category
          It holds a dictionary to give it any data it needs to do operations.
'''  

# Imports
from databaseinsert import DatabaseInsertClass
from tkinter import ttk, Listbox
from tkinter import Menu
from msilib.schema import ComboBox, ListBox
from tkinter.ttk import Treeview
from attendancewindows import AttendanceWindowsClass
from databaseconnection import DatabaseConnectionClass
from databaseupdate import DatabaseUpdateClass
from databasedelete import DatabaseDeleteClass
from databasequery import DatabaseQueryClass



class SenatorFunctionsClass(object):
    '''
    This function control operations on the database and treeview for the senator category.
    It holds the table data needed to operate on the database and treeview in a dictionary.
    '''


    def __init__(self, connection, database, treeview, data = {}):
        '''
        Constructor
        '''
        # Database connection.
        self.connection = connection
        
        # Database variable
        self.database = database
         
         
        # Dictionary that stores table data for operations on the treeview and the
        # database. Its keys are set to the same one generated by the treeview for 
        # easy access.
        self.data = data 
        
        
        # The treeview attached to the GUI.
        self.treeview = treeview 
                  
        
        datalist = DatabaseQueryClass.querysenatorall(self.database)   
  
        # Initially fills dictionary and treeview upon creation.      
        for i in datalist:
        
            id = self.treeview.insert('', 'end', values = i[1:5])
            
            
            self.data[id] = list(i)  
          
        try:

            self.treeview.selection_set(id)
            self.treeview.focus(id)
            
        except:
            return
        
    def newsenator(self, itemlist):  
        '''
        Adds a new senator entry in the database, treeview and dictionary. 
        Inserts in the senator table.
        Creates attendance tables for all meetings in relation to this senator. 
        ''' 
        
        inputlist = DatabaseInsertClass().insertsenator(self.database, self.connection, itemlist)
           
        
        id = self.treeview.insert('', 'end', values = tuple(inputlist[1:5]))
        
        list = DatabaseQueryClass.querymeetingidall(self.database)
        
        # Creates attendance tables for all meetings in relation to this senator. 
        for i in list:
            
            attendancelist =  [inputlist[0]] + [i[0]] 
            

            
            DatabaseInsertClass().insertattendance(self.database, self.connection, attendancelist)
        
        
        self.data[id] = inputlist
        
    def editsenator(self, itemlist):
        '''
        Deletes selected senator entry from database, treeview and dictionary. 
        '''
        
        id = self.treeview.selection()
        
        id = str(id[0])
        
        templist = self.data[id] 

        
        inputlist = DatabaseUpdateClass().updatesenator(self.database, self.connection, itemlist, templist[0])         
        
        self.treeview.item(id, values = tuple(inputlist[1:5]))
        
        self.data[id] = inputlist
        

        
    def deletesenator(self):
        '''
        Deletes senator entry from database, treeview and dictionary. 
        Deletes senator table.
        '''
        
        id = self.treeview.selection()
        
        id = str(id[0])
        
        templist = self.data[id] 
        
        DatabaseDeleteClass().deletesenator(self.database, self.connection, templist[0])
        
        self.treeview.delete(id)
        
        self.data.pop(id)
        
    def retrievesenator(self):
        '''
        Returns selected senator entry from dictionary.
        '''
        
        id = self.treeview.selection()
        
        id = id[0]
        
        itemlist = self.data[id] 
        
        return itemlist
    
    def fillsenatornames(self, treeview):
        '''
        Gets all senator names and ids from the dictionary
        and inserts them in the treeview.
        '''     

        
        namelist = self.data.values() 
        
        # Inserts names and ids into the treeview.
        for i in namelist:
        
            id = treeview.insert('', 'end', values = tuple([i[1]]+[i[0]]))   
            
        
        try:

            self.treeview.selection_set(id)
            self.treeview.focus(id)
            
        except:
            return
    
    def querysenator(self):
        '''
        Queries selected senator entry.
        Queries senator table.
        '''

        
        id = self.treeview.selection()
        
        
        id = id[0]
        
        itemlist = self.data[id] 
        
        list = DatabaseQueryClass.querysenator(self.database, itemlist[0])

        return list
    
    def clearsenator(self):
        '''
        Clears dictionary and treeview
        '''
        
        list = self.data.keys()

        # Clears treeview
        for id in list:
            self.treeview.delete(id)
  
        # Clears dictionary    
        self.data.clear()
    

            
        
        
        
        
        
            
        
        
        
        
        
        
         
        
        