'''
Author(s): Benjamin Gordon
Last Edited: 12/16/2019
Purpose:  Calls database functions and controls the relevant treeview for the meeting category
          It holds a dictionary to give it any data it needs to do operations.
'''  

# Imports
from databaseinsert import DatabaseInsertClass
from tkinter import ttk, Listbox
from tkinter import Menu
from msilib.schema import ComboBox, ListBox
from tkinter.ttk import Treeview
from attendancewindows import AttendanceWindowsClass
from databaseconnection import DatabaseConnectionClass
from databaseupdate import DatabaseUpdateClass
from databasedelete import DatabaseDeleteClass
from databasequery import DatabaseQueryClass



class MeetingFunctionsClass(object):
    '''
    This function control operations on the database and treeview for the meeting category.
    It holds the table data needed to operate on the database and treeview in a dictionary.
    '''


    def __init__(self, connection, database, treeview, data = {}, attendancedata = {}):
        '''
        Constructor
        '''
        # Database connection.
        self.connection = connection
        
        # Database variable
        self.database = database
         
         
        # Dictionary that stores table data for operations on the treeview and the
        # database. Its keys are set to the same one generated by the treeview for 
        # easy access.
        self.data = data 
        
        
        # The treeview attached to the GUI.
        self.treeview = treeview 
        
        # Initially fills dictionary and treeview upon creation.               
        datalist = DatabaseQueryClass.querymeetingall(self.database)   
        
        for i in datalist:
        
           id = self.treeview.insert('', 'end', values = i[1:3])
        
           self.data[id] = list(i)
        
        try:

            self.treeview.selection_set(id)
            self.treeview.focus(id)
            
        except:
            return      
        
        
    def newmeeting(self, itemlist):  
        '''
        Adds a new meeting entry in the database, treeview and dictionary. 
        Inserts in the meeting table.
        Creates attendance tables for all senators in relation to this meeting. 
        ''' 
        
        inputlist = DatabaseInsertClass().insertmeeting(self.database, self.connection, itemlist) 
        
        id = self.treeview.insert('', 'end', values = tuple(inputlist[1:3]))
        
        self.data[id] = inputlist
        
        list = DatabaseQueryClass.querysenatoridall(self.database)
        
        # Creates attendance tables for all senators in relation to this meeting.
        for i in list:
            
            attendancelist = [i[0]] + [inputlist[0]]
            
         
            
            DatabaseInsertClass().insertattendance(self.database, self.connection, attendancelist)
            
        
        
    def editmeeting(self, itemlist):
        '''
        Edits selected meeting entry in the database, treeview and dictionary. 
        Edits the meeting table.
        '''
        
        id = self.treeview.selection()
        
        id = str(id[0])
        
        templist = self.data[id] 
        
        inputlist = DatabaseUpdateClass().updatemeeting(self.database, self.connection, itemlist, templist[0])         
        
        self.treeview.item(id, values = tuple(inputlist[1:3]))
        
        self.data[id] = inputlist
        
    def deletemeeting(self):
        '''
        Deletes selected meeting entry from database, treeview and dictionary. 
        Deletes meeting table. 
        '''
        
        
        id = self.treeview.selection()
        
        id = str(id[0])
        
        templist = self.data[id] 
        
        DatabaseDeleteClass().deletesenator(self.database, self.connection, templist[0])
        
        self.treeview.delete(id)
        
        self.data.pop(id)
        
    def retrievemeeting(self):
        '''
        Deletes meeting entry from database, treeview and dictionary. 
        '''
        
        id = self.treeview.selection()
        
        id = id[0]
        
        itemlist = self.data[id] 
        
        return itemlist
    
    def retrievemeetingid(self):
        '''
        Returns selected meeting entry from dictionary.
        '''
        
        id = self.treeview.selection()
        
        id = id[0]
        
        itemlist = self.data[id] 
        
        return itemlist[0]

        
    def querymeeting(self):
        '''
        Queries selected meeting entry.
        Queries meeting table.
        '''
        
        id = self.treeview.selection()
        
        
        
        id = id[0]
        
        itemlist = self.data[id] 
        
        list = DatabaseQueryClass.querymeeting(self.database, itemlist[0])

        return list
    

    def clearmeeting(self):
        '''
        Clears dictionary and treeview
        '''
        

        list = self.data.keys()

        # Clears treeview
        for id in list:
            self.treeview.delete(id)
  
        # Clears dictionary            
        self.data.clear()
            
        
        
        
        
        
        
        
        
        
        
         
        
        