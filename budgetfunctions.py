'''
Author(s): Benjamin Gordon
Last Edited: 12/16/2019
Purpose:  Calls database functions and controls the relevant treeview for the budget category
          It holds a dictionary to give it any table data it needs to do operations.
'''  

# Imports
from databaseinsert import DatabaseInsertClass
from tkinter import ttk, Listbox
from tkinter import Menu
from msilib.schema import ComboBox, ListBox
from tkinter.ttk import Treeview
from attendancewindows import AttendanceWindowsClass
from databaseconnection import DatabaseConnectionClass
from databaseupdate import DatabaseUpdateClass
from databasedelete import DatabaseDeleteClass
from databasequery import DatabaseQueryClass



class BudgetFunctionsClass(object):
    '''
    This function control operations on the database and treeview for the budget category.
    It holds the table data needed to operate on the database and treeview in a dictionary.
    '''


    def __init__(self, connection, database, treeview, data = {}):
        '''
        Constructor
        '''
        
        # Database connection.
        self.connection = connection
        
        # Database variable
        self.database = database
         
         
        # Dictionary that stores table data for operations on the treeview and the
        # database. Its keys are set to the same one generated by the treeview for 
        # easy access.
        self.data = data 
        
        
        # The treeview attached to the GUI.
        self.treeview = treeview 
        
        
        
        datalist = DatabaseQueryClass.querybudgetall(self.database) 
        
   
        # Initially fills dictionary and treeview upon creation.
        for i in datalist:
        
            id = self.treeview.insert('', 'end', values = tuple(DatabaseQueryClass.queryclubname(self.database, i[4]) + list(i[1:4])))
            
            
            self.data[id] = list(i)  
            
        try:

            self.treeview.selection_set(id)
            self.treeview.focus(id)
            
        except:
            return
        
        
              
        
        
    def newbudget(self, itemlist):  
        '''
        Adds a new budget entry in the database, treeview and dictionary. 
        Inserts into the budget table.
        '''
        
        
        inputlist = DatabaseInsertClass().insertbudget(self.database, self.connection, itemlist)
        
           
        # Queries budgets the club name.
        list = DatabaseQueryClass.querybudget(self.database, inputlist[4])
        
        
        id = self.treeview.insert('', 'end', values = tuple(list))
        
        
        self.data[id] = inputlist
        
    def editbudget(self, itemlist):
        '''
        Edits selected budget entry in the database, treeview and dictionary. 
        Edits the budget table.
        '''
        
        id = self.treeview.selection()
        
        id = str(id[0])
        
        templist = self.data[id] 

        
        inputlist = DatabaseUpdateClass().updatebudget(self.database, self.connection, itemlist, templist[0])         
        
        # Queries updated budget to get the potential changed club.
        list = DatabaseQueryClass.querybudget(self.database, inputlist[4])
        
        
        self.treeview.item(id, values = tuple([list[0]] + inputlist[1:4]))
        
        
        self.data[id] = inputlist
        
    def deletebudget(self):
        '''
        Deletes selected budget entry from database, treeview and dictionary. 
        Deletes budget table.
        '''
        
        id = self.treeview.selection()
        
        id = str(id[0])
        
        templist = self.data[id] 
        
        DatabaseDeleteClass().deletebudget(self.database, self.connection, templist[0])
        
        self.treeview.delete(id)
        
        self.data.pop(id)

        
    def retrievebudget(self):
        '''
        Returns selected budget entry from dictionary.
        '''
        
        id = self.treeview.selection()
        
        id = id[0]
        
        itemlist = self.data[id] 
        
        return itemlist
    
    def querybudget(self):
        '''
        Queries selected budget entry.
        Queries budget table.
        '''
        
        id = self.treeview.selection()
        
      
        
        id = id[0]
        
 
        
        itemlist = self.data[id] 
        
        list = DatabaseQueryClass.querybudget(self.database, itemlist[4])

        return list

    def clearbudget(self):
        '''
        Clears dictionary and treeview
        '''
        

 
        list = self.data.keys()

        # Clears treeview
        for id in list:
            self.treeview.delete(id)
            
        # Clears dictionary
        self.data.clear()
            
        
        
        
        
        
        
         
        
        